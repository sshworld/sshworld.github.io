<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>성껌이의 이것저것</title>
    <link>https://sshworld.github.io/</link>
    
    <atom:link href="https://sshworld.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Wed, 22 Dec 2021 08:27:56 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>OSI 7 계층</title>
      <link>https://sshworld.github.io/network/The-OSI-7-Layers/</link>
      <guid>https://sshworld.github.io/network/The-OSI-7-Layers/</guid>
      <pubDate>Wed, 22 Dec 2021 06:03:24 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;OSI-7-계층이란&quot;&gt;&lt;a href=&quot;#OSI-7-계층이란&quot; class=&quot;headerlink&quot; title=&quot;OSI 7 계층이란?&quot;&gt;&lt;/a&gt;OSI 7 계층이란?&lt;/h1&gt;&lt;p&gt;OSI 7 계층은 컴퓨터 네트워크 프로토콜이 통신하는 구조를 7개</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="OSI-7-계층이란"><a href="#OSI-7-계층이란" class="headerlink" title="OSI 7 계층이란?"></a>OSI 7 계층이란?</h1><p>OSI 7 계층은 컴퓨터 네트워크 프로토콜이 통신하는 구조를 7개의 계층으로 분리하여 나타낸 것을 말한다.</p><h2 id="OSI-7-계층으로-분리한-이유"><a href="#OSI-7-계층으로-분리한-이유" class="headerlink" title="OSI 7 계층으로 분리한 이유?"></a>OSI 7 계층으로 분리한 이유?</h2><p>각 계층은 독립되어 있어 네트워크에서 트래픽의 흐름을 꿰뚫어 볼 수 있기에 흐름을 한 눈에 알아보기 쉽다.</p><p>7단계 중 특정한 곳에 이상이 생기면 다른 단계의 장비 및 소프트웨어를 건드리지 않고도 이상이 생긴 단계만 고칠 수 있다.</p><blockquote><p>It is because of the fact that it will be <code>easy for troubleshooting the network problems.</code><br>Only the layer in which the problem exist will be modified. Other layers are left untouched.</p></blockquote><h2 id="문제로-예를-들어-보자"><a href="#문제로-예를-들어-보자" class="headerlink" title="문제로 예를 들어 보자!"></a>문제로 예를 들어 보자!</h2><pre><code>친구들과 PC방을 가서 롤을 하다 연결이 끊겼다.PC방의 모든 PC가 문제가 있다면라우터의 문제(3: 네트워크 계층)이거나 광랜을 제공하는 회사의 회선 문제(1: 물리 계층)친구들의 PC와 롤 소프트웨어에 문제가 있다면(7: 어플리케이션 계층)롤 소프트웨어에 문제가 없고, 스위치에 문제가 있으면(2: 데이터링크 계층)이러한 문제별로 판단하여 다른 계층의 장비와 소프트웨어를 건들이지 않는 것이다.</code></pre><h2 id="왜-모듈이-아닌-계층"><a href="#왜-모듈이-아닌-계층" class="headerlink" title="왜 모듈이 아닌 계층?"></a>왜 모듈이 아닌 계층?</h2><p>각 계층은 상하구조를 가진다.</p><p>상위 계층의 프로토콜이 제대로 동작하기 위해선 하위 모든 계층에 문제가 없어야 한다. <strong>(중요)</strong></p><p>즉 7계층이 제대로 동작하려면 1~6계층이 모두 완벽하게 문제가 없어야 한다는 것이다.</p><p>왜 이런 상하구조를 가지고 있는가?</p><blockquote><p>물리적 회선이 있어야 데이터를 보내지, 연결도 안되어 있는데 동작을 하겠어??</p></blockquote><p>라고 하더라.</p><h1 id="OSI-7-계층-단계"><a href="#OSI-7-계층-단계" class="headerlink" title="OSI 7 계층 단계"></a>OSI 7 계층 단계</h1><p><img src="/images/OSI_7_layers.jpg" alt="OSI-7-Layer-Model"></p><h2 id="물리-계층-Physical-Layer"><a href="#물리-계층-Physical-Layer" class="headerlink" title="물리 계층(Physical Layer)"></a>물리 계층(Physical Layer)</h2><p>이 계층은 네트워크 데이터가 전송되는 물리적인 매체이다.</p><p>주로 전기적, 기계적, 기능적인 특성을 이용해서 통신 케이블로 데이터를 전송한다.</p><p>이 계층에서 사용되는 <strong>통신 단위는 비트(bit)</strong> 이며 이것은 1과 0으로 나타내어지는, 즉 전기적으로 ON, OFF 상태라고 생각하면 된다.</p><p>단지 데이터만 전달할 뿐 전송, 수신하는 데이터의 상태, 종류 등에는 신경쓰지 않는다.</p><p>OSI 모델에서 가장 복잡한 계층으로 간주되며, 대표적인 장비는 <code>통신 케이블, 리피터, 허브</code>등이 있다.</p><h2 id="데이터-링크계층-Data-Link-Layer"><a href="#데이터-링크계층-Data-Link-Layer" class="headerlink" title="데이터 링크계층(Data-Link Layer)"></a>데이터 링크계층(Data-Link Layer)</h2><p>물리 계층에서 송수신되는 정보의 오류와 흐름을 관리하여 안전한 정보의 전달을 수행할 수 있도록 도와주는 역할을 한다.</p><p>데이터 전송은 Point-To-Point 간 신뢰성있는 전송을 보장하기 위한 계층으로 CRC 기반의 오류 제어와 흐름제어가 필요하다.</p><p>물리 계층에서 발생할 수 있는 오류를 찾아내고 수정하는 데 필요한 기능적, 절차적 수단을 제공한다.</p><p>주소 값은 물리적으로 할당 받는데, 이는 네트워크 카드가 만들어질 때부터 맥 주소(MAC address)가 정해져 있다는 뜻이다. </p><p><strong>데이터 단위는 프레임(Frame)</strong> 이며, 대표적인 장비는 <code>브리지, 스위치, 이더넷</code>등이 있다.</p><h2 id="네트워크-계층-Network-Layer"><a href="#네트워크-계층-Network-Layer" class="headerlink" title="네트워크 계층(Network Layer)"></a>네트워크 계층(Network Layer)</h2><p>네트워크에서 가장 중요한 네트워크 계층의 주요 기능 중 하나는 라우팅이다.</p><p>라우팅은 데이터를 목적지까지 가장 안전하고 빠르게 전달하는 기능으로 경로에 따라 패킷을 전달해주는 기능이며, 최적의 경로를 설정하는 것이 중요하다.</p><p>OSI 7 계층에서 가장 복잡한 계층 중 하나로 실제 네트워크 간 이러한 데이터 라우팅 기능을 맡고 있다.</p><p>또한 데이터를 전송할 컴퓨터의 주소를 이용하여 통신을 합니다. 우리가 자주 듣는 IP 주소가 바로 네트워크 계층 헤더에 속해있습니다.</p><p><strong>데이터 단위는 패킷(Packet)</strong> 이며, 대표적인 장비는 <code>라우터</code>이며, 요즘은 2계층의 장비 중 스위치라는 장비에 라우팅 기능을 장착한 <code>Layer 3 스위치</code>도 있다. (여기서 IP주소를 사용한다.)</p><h2 id="전송-계층-Transport-Layer"><a href="#전송-계층-Transport-Layer" class="headerlink" title="전송 계층(Transport Layer)"></a>전송 계층(Transport Layer)</h2><p>전송 계층 역시 네트워크에서 중요한 계층으로 양 끝단(End-To-End)의 사용자들이 신뢰성있는 데이터를 주고 받게 해주는 역할을 한다.</p><p>송신자와 수신자 간의 신뢰성있고 효율적인 데이터를 전송하기 위하여 오류검출 및 복구, 흐름제어와 중복검사 등을 수행한다.</p><p>포트(Port) 번호를 사용하여 데이터 전송을 할 수 있게 한다.</p><p>전송 계층은 특정 연결의 유효성을 제어하고, 일부 프로토콜은 상태 개념(Stateful)이 있으며, 연결 기반(Connection Oriented)이다.</p><p>이는 전송 계층이 패킷들의 전송이 유효한지 확인하고 전송 실패한 패킷들을 다시 전송한다는 것이다.</p><p><strong>데이터 단위는 세그먼트(Segment)</strong> 이며, 대표적인 프로토콜로는 TCP와 UDP가 있다.</p><h2 id="세션-계층-Session-Layer"><a href="#세션-계층-Session-Layer" class="headerlink" title="세션 계층(Session Layer)"></a>세션 계층(Session Layer)</h2><p>세션 계층은 응용 프로세스가 통신을 관리하기 위한 방법을 정의한다.</p><p>두 컴퓨터 간의 대화나 세션을 관리하며, 포트(Port)연결이라고도 한다.</p><p>세션 계층(Session layer)은 양 끝단의 응용 프로세스가 통신을 관리하기 위한 방법을 제공한다. </p><p>동시 송수신 방식(duplex), 반이중 방식(half-duplex), 전이중 방식(Full Duplex)의 통신과 함께, 체크 포인팅과 유휴, 종료, 다시 시작 과정 등을 수행한다. </p><p>TCP/IP 세션을 만들고 없애는 역할을 한다.</p><h2 id="표현-계층-Presentation-Layer"><a href="#표현-계층-Presentation-Layer" class="headerlink" title="표현 계층(Presentation Layer)"></a>표현 계층(Presentation Layer)</h2><p>데이터를 어떻게 표현할 지 정하는 역할을 하는 계층으로 일종의 확장자라고 생각하면 편하다.</p><p>코드 간의 번역을 담당하여 사용자 시스템에서 데이터의 형식상 차이를 다루는 부담을 응용 계층으로부터 덜어 준다.</p><h3 id="표현-계층의-세가지-기능"><a href="#표현-계층의-세가지-기능" class="headerlink" title="표현 계층의 세가지 기능"></a>표현 계층의 세가지 기능</h3><ul><li>송신자에서 온 데이터를 해석하기 위한 응용계층 데이터 부호화, 변화</li><li>수신자에서 데이터의 압축을 풀수 있는 방식으로 된 데이터 압축</li><li>데이터의 암호화와 복호화</li></ul><p>예를 들면, 유니코드(UTF-8)로 인코딩 되어있는 문서 파일을 ASCII로 인코딩된 파일로 바꿔 주는 것, 해당 데이터가 TXT인지, PNG인지, GIF인지 JPG인지의 구분 등이 표현 계층의 몫이다.</p><h2 id="응용-계층-Application-Layer"><a href="#응용-계층-Application-Layer" class="headerlink" title="응용 계층(Application Layer)"></a>응용 계층(Application Layer)</h2><p>응용 계층은 사용자와 가장 가까운 계층으로 우리가 사용하는 응용 서비스나 프로세스가 응용계층에서 동작한다.</p><p>최종적으로 사용자가 볼 수 있는 유일한 계층으로 모든 네트워크 활동의 기반이 되는 인터페이스를 제공한다.</p><p>예를 들어서 가상 터미널인 텔넷(Telnet), 구글의 크롬(Chrome), 이메일, 데이터베이스 관리 등 응용프로그램의 서비스를 제공한다.</p><p>HTTP, FTP, SMTP, POP3, IMAP, Telnet 등과 같은 프로토콜이 있으며, 응용프로그램 전체보단 응용 서비스를 수행한다고 생각하면 좋을 것 같다.</p><h1 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h1><blockquote><p>상위 계층은 하위계층의 기능을 모두 포함한다.</p></blockquote><p>1계층의 물리적신호(전기적 신호 0,1)을 보내</p><p>2계층 LAN카드의 MAC주소를 이용하여 허브나,스위치,와이파이 공유기등등에 데이터를 보내고</p><p>3계층 PC에 게이트웨이로 설정된 라우터로 데이터가 나가고 목적지 까지 가기위한 경로를 라우팅테이블에서 확인 후 목적지에 가기위해 거쳐야 할 라우터에 전송한다</p><p>4계층은 PC에서 라우터와 라우터와 라우터의 전송 즉 전체적인 전송을 제어한다</p><p>5계층은 PC와 서버간의 연결을 제어하고</p><p>6계층은 서버에서 받은 데이터 (0,1)의 데이터 표현과 암호화 및 코드 간의 번역을 담당한다</p><p>7계층은 하위 계층에서 받은 정보로 사용자가 알아볼 수 있게 인터페이스를 출력한다</p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li><a href="https://shlee0882.tistory.com/110">https://shlee0882.tistory.com/110</a></li><li><a href="http://wiki.hash.kr/index.php/OSI_7_%EA%B3%84%EC%B8%B5">http://wiki.hash.kr/index.php/OSI_7_%EA%B3%84%EC%B8%B5</a></li><li><a href="https://jhnyang.tistory.com/194">https://jhnyang.tistory.com/194</a></li><li><a href="https://ko.wikipedia.org/wiki/OSI_%EB%AA%A8%ED%98%95">https://ko.wikipedia.org/wiki/OSI_%EB%AA%A8%ED%98%95</a></li><li><a href="https://reakwon.tistory.com/59">https://reakwon.tistory.com/59</a></li><li><a href="https://leejoongwon.tistory.com/51">https://leejoongwon.tistory.com/51</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sshworld.github.io/categories/network/">network</category>
      
      
      <category domain="https://sshworld.github.io/tags/network/">network</category>
      
      <category domain="https://sshworld.github.io/tags/ip-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C/">ip 프로토콜</category>
      
      <category domain="https://sshworld.github.io/tags/OSI-7-Layer/">OSI 7 Layer</category>
      
      <category domain="https://sshworld.github.io/tags/OSI-7-%EA%B3%84%EC%B8%B5/">OSI 7 계층</category>
      
      <category domain="https://sshworld.github.io/tags/tcp-ip-udp-protocol/">tcp ip udp protocol</category>
      
      <category domain="https://sshworld.github.io/tags/tcp-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C/">tcp 프로토콜</category>
      
      
      <comments>https://sshworld.github.io/network/The-OSI-7-Layers/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>소켓통신(Socket Communication)이란?</title>
      <link>https://sshworld.github.io/network/socket-communication/</link>
      <guid>https://sshworld.github.io/network/socket-communication/</guid>
      <pubDate>Tue, 21 Dec 2021 09:04:58 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;소켓통신이란&quot;&gt;&lt;a href=&quot;#소켓통신이란&quot; class=&quot;headerlink&quot; title=&quot;소켓통신이란?&quot;&gt;&lt;/a&gt;소켓통신이란?&lt;/h1&gt;&lt;p&gt;소켓은 떨어져 있는 두 호스트를 연결해주고, 데이터를 주고 받을 수 있는 데이터 통로를 만들어</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="소켓통신이란"><a href="#소켓통신이란" class="headerlink" title="소켓통신이란?"></a>소켓통신이란?</h1><p>소켓은 떨어져 있는 두 호스트를 연결해주고, 데이터를 주고 받을 수 있는 데이터 통로를 만들어 주는 도구로써 인터페이스의 역할을 한다. 역할에 따라 서버 소켓, 클라이언트 소켓으로 구분이 되는데 클라이언트 프로세스는 소켓을 열어 소켓에 데이터를 써서 서버에 보내며, 서버 프로세스는 소켓으로부터 받은 데이터를 읽어 사용한다.</p><h2 id="소켓통신의-흐름"><a href="#소켓통신의-흐름" class="headerlink" title="소켓통신의 흐름"></a>소켓통신의 흐름</h2><p><img src="/images/socket_interface.jpg" alt="socket-interface"></p><h3 id="서버-Server"><a href="#서버-Server" class="headerlink" title="서버 (Server)"></a>서버 (Server)</h3><p>클라이언트 소켓의 연결 요청을 대기하고, 연결 요청이 오면 클라이언트 소켓을 생성하여 통신이 가능하게 한다.</p><ol><li><code>socket()</code> 함수를 이용하여 소켓을 생성</li><li><code>bind()</code> 함수로 ip와 port 번호 설정</li><li><code>listen()</code> 함수로 클라이언트의 접근 요청에 수신 대기열을 만들어 몇 개의 클라이언트를 대기 시킬지 결정</li><li><code>accept()</code> 함수를 사용하여 클라이언트와의 연결 대기</li></ol><h3 id="클라이언트-Client"><a href="#클라이언트-Client" class="headerlink" title="클라이언트 (Client)"></a>클라이언트 (Client)</h3><p>실제로 데이터 송수신이 일어나는 것은 클라이언트 소켓이다.</p><ol><li><code>socket()</code> 함수로 <code>CLOSED</code> 소켓 생성</li><li><code>connect()</code> 함수를 이용하여 통신 할 서버의 설정된 ip와 port 번호에 통신 시도</li><li>통신 시도 시, 서버에서 <code>accept()</code> 함수로 클라이언트의 socket descriptor 반환</li><li>클라이언트와 서버가 서로 <code>read()</code>, <code>write()</code> 함수로 반복 통신</li></ol><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li><a href="https://velog.io/@emplam27/CS-%EA%B7%B8%EB%A6%BC%EC%9C%BC%EB%A1%9C-%EC%95%8C%EC%95%84%EB%B3%B4%EB%8A%94-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EC%86%8C%EC%BC%93-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EA%B3%BC-Handshaking">https://velog.io/@emplam27/CS-그림으로-알아보는-네트워크-소켓-프로그래밍과-Handshaking</a></li><li><a href="https://helloworld-88.tistory.com/215">https://helloworld-88.tistory.com/215</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sshworld.github.io/categories/network/">network</category>
      
      
      <category domain="https://sshworld.github.io/tags/network/">network</category>
      
      <category domain="https://sshworld.github.io/tags/socket/">socket</category>
      
      
      <comments>https://sshworld.github.io/network/socket-communication/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>소켓(Socket)이란?</title>
      <link>https://sshworld.github.io/network/socket/</link>
      <guid>https://sshworld.github.io/network/socket/</guid>
      <pubDate>Tue, 21 Dec 2021 07:05:57 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;소켓이란&quot;&gt;&lt;a href=&quot;#소켓이란&quot; class=&quot;headerlink&quot; title=&quot;소켓이란?&quot;&gt;&lt;/a&gt;소켓이란?&lt;/h1&gt;&lt;p&gt;TCP/IP로 통신을 행하는 컴퓨터가 가지는 네트워크 내에서의 주소에 해당하는 IP어드레스와, IP어드레스의</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="소켓이란"><a href="#소켓이란" class="headerlink" title="소켓이란?"></a>소켓이란?</h1><p>TCP/IP로 통신을 행하는 컴퓨터가 가지는 네트워크 내에서의 주소에 해당하는 IP어드레스와, IP어드레스의 서브(보조)어드레스인 포트 번호를 조합한 네트워크 어드레스를 말한다.</p><p>소켓은 네트워크 상에서 서버와 클라이언트 사이의 통신 방법으로 특정 포트를 통해 양방향 통신이 가능하도록 하는 소프트웨어 장치로써 소켓에 데이터를 써보내거나 소켓으로부터 데이터를 읽어들일 수 있다.</p><p>소켓은 프로토콜, IP 주소, 포트 넘버로 정의된다.</p><ul><li>프로토콜<br>프로토콜은 원래 외교상의 언어로써 의례나 국가간의 약속을 의미하며, 통신에서는 어떤 시스템이 다른 시스템과 통신을 원할하게 수용하도록 해주는 통신 규약</li></ul><ul><li>IP<br>전 세계 컴퓨터에 부여된 고유 식별 주소</li></ul><ul><li>포트(Port)<br>네트워크를 통해 데이터를 주고받는 프로세스를 식별하기 위해 호스트 내부적으로 프로세스가 할당받는 고유한 값<br>한 호스트 내에서 네트워크 통신을 하고 있는 프로세스를 식별하기 위해 사용되는 값으로, 같은 호스트 내에서 서로 다른 프로세스가 같은 포트 넘버를 가질 수 없다.</li></ul><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li><a href="https://helloworld-88.tistory.com/215">https://helloworld-88.tistory.com/215</a></li><li><a href="https://blog.naver.com/PostView.nhn?isHttpsRedirect=true&amp;blogId=myca11&amp;logNo=80146459609">https://blog.naver.com/PostView.nhn?isHttpsRedirect=true&amp;blogId=myca11&amp;logNo=80146459609</a></li><li><a href="https://blog.naver.com/myca11/221389847130">https://blog.naver.com/myca11/221389847130</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://sshworld.github.io/categories/network/">network</category>
      
      
      <category domain="https://sshworld.github.io/tags/network/">network</category>
      
      <category domain="https://sshworld.github.io/tags/socket/">socket</category>
      
      
      <comments>https://sshworld.github.io/network/socket/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
